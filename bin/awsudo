#!/usr/bin/env node

const AWS = require("aws-sdk");
const { execSync } = require("child_process");

const REMOVE_NODE_COMMANDS = 2;
const ARN_PLUS_NEXT_COMMAND = 2;
/*
function parseArgvForAwsCommand() {
    const argvArray = Array.from(process.argv).slice(REMOVE_NODE_COMMANDS);
    return { awsudoOptions: argvArray, awsCommand: null };
    const arn = argvArray.find((option) => option.startsWith('arn:'));
    const arnPosition = argvArray.indexOf(arn);
    const awsudoOptions = argvArray.slice(0, arnPosition + ARN_PLUS_NEXT_COMMAND);
    const awsCommand = argvArray.slice(arnPosition + 1, argvArray.length);

    return {
        awsudoOptions,
        awsCommand
    };
}
*/

const yargv = require("yargs")(process.argv.slice(2))
    .usage(
        "$0 [-d|--duration] [-p|--profile] [-n|--session-name] [-e|--external-id] [-v|--verbose] [-m|--mfa-token-arn] [-t|--mfa-token] [arn] <command..>",
        "Assume an IAM role for the duration of a command",
        yargs => {
            yargs
                .option("d", {
                    alias: "duration",
                    describe:
                        "The duration to assume this role in seconds. See https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html#API_AssumeRole_RequestParameters",
                    default: 900,
                    type: "number"
                })
                .option("p", {
                    alias: "profile",
                    describe: "The profile used to assume the role",
                    default: "",
                    type: "string"
                })
                .option("n", {
                    alias: "session-name",
                    describe: "The role session name to use",
                    default: "RoleSession",
                    type: "string"
                })
                .option("e", {
                    alias: "external-id",
                    describe: "The external id string used to authenticate role assumption",
                    default: false,
                    type: "string"
                })
                .option("v", {
                    alias: "verbose",
                    describe: "Show debug information",
                    default: false,
                    type: "boolean"
                })
                .option("t", {
                    alias: "mfa-token",
                    describe: "Current MFA token [Must also supply mfa-token-arn]",
                    default: false,
                    type: "string"
                })
                .option("m", {
                    alias: "mfa-token-arn",
                    describe: "ARN for users MFA [Must also supply mfa-token]",
                    default: false,
                    type: "string"
                })
                .positional("arn", {
                    default: '',
                    describe: "ARN to assume",
                    type: "string"
                })
                .positional("command", {
                    describe: "Command to run",
                    type: "array"
                });
        }
    ).argv;

const argv = (function adaptArgumentOptions(args) {
    console.log('args', args);
    let arn;
    let command;

    if (/^arn:aws:iam/.test(args.command[0])) {
        arn = args.command[0];
        command = args.command.slice(1);
    }

    if (!arn && !args.profile) {
        console.log('Either a role arn or a profile must be specified');
        process.exit(1);
    }

    if (arn && args.profile) {
        console.log('Only one of a role arn or a profile can be specified');
        process.exit(1);
    }

    return {
        ...args,
        arn,
        command
    };
})(yargv);

console.log('argv', argv);

if (argv.verbose) {
    console.log(`Using RoleArn: ${argv.arn}`);
}

(async () => {
    let command;
    let credentials;
    const stsOptions = {};

    try {
        const assumeRoleParameters = {
            RoleSessionName: argv.sessionName,
            DurationSeconds: argv.duration
        };

        if (argv.arn) {
            assumeRoleParameters.RoleArn = argv.arn;
        }

        if (argv.externalId) {
            assumeRoleParameters.ExternalId = argv.externalId;
        }

        if (argv.mfaToken && argv.mfaTokenArn) {
            assumeRoleParameters.SerialNumber = argv.mfaTokenArn;
            assumeRoleParameters.TokenCode = argv.mfaToken;
            stsOptions.correctClockSkew = true;
        } else if (argv.mfaToken || argv.mfaTokenArn) {
            console.error('To use MFA you must supply both --mfa-token-arn and --mfa-token');
            process.exitCode = -1;
            return;
        }

        if (argv.profile) {
            AWS.config.credentials = new AWS.SharedIniFileCredentials({ profile: argv.profile });
        }

        const sts = new AWS.STS(stsOptions);
        const data = await sts
            .assumeRole(assumeRoleParameters)
            .promise();
        credentials = data.Credentials;
    } catch (err) {
        console.log("Exception while assuming role:", err);
        process.exit(1);
    }

    const commandArgs = [
        ["AWS_ACCESS_KEY_ID", credentials.AccessKeyId],
        ["AWS_SECRET_ACCESS_KEY", credentials.SecretAccessKey],
        ["AWS_SESSION_TOKEN", credentials.SessionToken],
        ["AWS_EXPIRATION", credentials.Expiration.toISOString()]
    ]
        .map(arr => arr.join("="));

    if (process.platform === "win32") {
        command = commandArgs
            .map((arr) => `SET "${arr}"`)
            .concat(argv.command.join(" "))
            .join(" & ");
    }
    else {
        command = commandArgs.concat(argv.command.join(" "));
    }

    if (argv.verbose) {
        console.log(`Running command ${command}`);
    }

    console.log('Command to execute', command);
    //execSync(command, { stdio: "inherit" });
})().catch(err => {
    if (argv.verbose) {
        const maskedError = err.replace(/(AWS_\w+?=)(\S+)/g, '$1XXXXXXXXXXXXXXXXXXXX');
        console.log("Caught runtime exception:", maskedError);
    }

    process.exit(1);
});
