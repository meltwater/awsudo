#!/usr/bin/env node

const AWS = require("aws-sdk");
const { execSync } = require("child_process");

const argv = require("yargs")
  .parserConfiguration({
    "halt-at-non-option": true
  })
  .usage(
    "$0 <arn>",
    "awsudo [-d|--duration] [-v|--verbose] <arn> <command..>",
    yargs => {
      yargs
        .option("d", {
          alias: "duration",
          describe: "The duration to assume this role",
          default: 900,
          type: "number"
        })
        .option("v", {
          alias: "verbose",
          default: false,
          type: "boolean"
        })
        .positional("arn", {
          describe: "ARN to assume",
          type: "string"
        })
        .positional("command", {
          describe: "Command to run",
          type: "array"
        });
    }
  ).argv;

if (argv.verbose) {
  console.log(`Using RoleArn: ${argv.arn}`);
}

if (!/^arn:aws:iam/.test(argv.arn)) {
  console.log(`Invalid role arn provided. Provided value: ${argv.arn}`);
  process.exit(1);
}

(async () => {
  var sts = new AWS.STS();
  const data = await sts
    .assumeRole({
      RoleArn: argv.arn,
      RoleSessionName: "RoleSession",
      DurationSeconds: argv.duration
    })
    .promise();
  const credentials = data.Credentials;

  const command = [
    ["AWS_ACCESS_KEY_ID", credentials.AccessKeyId],
    ["AWS_SECRET_ACCESS_KEY", credentials.SecretAccessKey],
    ["AWS_SESSION_TOKEN", credentials.SessionToken],
    ["AWS_EXPIRATION", credentials.Expiration.toISOString()]
  ]
    .map(arr => arr.join("="))
    .concat(argv._)
    .join(" ");

  if (argv.verbose) {
    console.log(`Running command ${command}`);
  }

  execSync(command, { stdio: "inherit" });
})();
