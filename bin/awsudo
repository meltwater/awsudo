#!/usr/bin/env node

const AWS = require("aws-sdk");
const { execSync } = require("child_process");

function parseArgvForAwsCommand() {
    const argvArray = Array.from(process.argv).slice(2);
    const arn = argvArray.find((option) => option.startsWith('arn:'));
    const arnPosition = argvArray.indexOf(arn);
    const awsudoOptions = argvArray.slice(0, arnPosition + 2);
    const awsCommand = argvArray.slice(arnPosition + 1, argvArray.length);

    return {
        awsudoOptions,
        awsCommand
    };
}

const argv = require("yargs")(parseArgvForAwsCommand().awsudoOptions)
  .usage(
    "$0 [-d|--duration] [-v|--verbose] <arn> <command..>",
    "Assume an IAM role for the duration of a command",
    yargs => {
      yargs
        .option("d", {
          alias: "duration",
          describe:
            "The duration to assume this role in seconds. See https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html#API_AssumeRole_RequestParameters",
          default: 900,
          type: "number"
        })
        .option("v", {
          alias: "verbose",
          describe: "Show debug information",
          default: false,
          type: "boolean"
        })
        .positional("arn", {
          describe: "ARN to assume",
          type: "string"
        })
        .positional("command", {
          describe: "Command to run",
          type: "array"
        });
    }
  ).argv;

if (argv.verbose) {
  console.log(`Using RoleArn: ${argv.arn}`);
}

if (!/^arn:aws:iam/.test(argv.arn)) {
  console.log(`Invalid role arn provided. Provided value: ${argv.arn}`);
  process.exit(1);
}

(async () => {
  const sts = new AWS.STS();
  let credentials;
  try {
    const data = await sts
      .assumeRole({
        RoleArn: argv.arn,
        RoleSessionName: "RoleSession",
        DurationSeconds: argv.duration
      })
      .promise();
    credentials = data.Credentials;
  } catch (err) {
    console.log("Exception while assuming role:", err);
    process.exit(1);
  }

  let commandArgs = [
    ["AWS_ACCESS_KEY_ID", credentials.AccessKeyId],
    ["AWS_SECRET_ACCESS_KEY", credentials.SecretAccessKey],
    ["AWS_SESSION_TOKEN", credentials.SessionToken],
    ["AWS_EXPIRATION", credentials.Expiration.toISOString()]
  ]
    .map(arr => arr.join("="))
    .concat(parseArgvForAwsCommand().awsCommand);

  const command = commandArgs.join(" ");

  if (argv.verbose) {
    console.log(`Running command ${command}`);
  }

  execSync(command, { stdio: "inherit" });
})().catch(err => {
  console.log("Caught runtime exception:", err);
  process.exit(1);
});
