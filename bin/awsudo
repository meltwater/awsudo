#!/usr/bin/env bash
# DEPENDENCIES:
#  - awscli

set -e # Exit on any child process error

VERBOSE=false
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -h|--help)
    echo "awsudo git [-h|--help] [-v|--verbose] <role-arn> <sub command>"
    exit 0
    ;;
    -v|--verbose)
    VERBOSE=true
    shift # past argument
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

ROLE_ARN=$1
shift

if [[ ${ROLE_ARN} =~ ^arn:aws:iam ]]; then
    if $VERBOSE; then
        echo "Using RoleArn: ${ROLE_ARN}"
    fi
else
    echo "Invalid role arn provided. Provided value: ${ROLE_ARN}"
    exit 1
fi

# Assume role for running cloud formation
export CREDENTIALS=`aws sts assume-role --role-arn ${ROLE_ARN} --role-session-name RoleSession --duration-seconds 900 --output=json`

# Report and exit if there is an error with role credentials
if [[ "Invalid" = `node -e "try { JSON.parse(process.env.CREDENTIALS); } catch (error) { console.log('Invalid'); }"` ]]; then
    echo "Credentials are invalid."
    if [ -n "${CREDENTIALS}" ]; then
        echo "Returned value: ${CREDENTIALS}"
    fi
    echo "Exiting."
    exit 1
fi

# Set AWS Assumed Role Credentials on ENV
export AWS_ACCESS_KEY_ID=`node -p "JSON.parse(process.env.CREDENTIALS).Credentials.AccessKeyId"`
export AWS_SECRET_ACCESS_KEY=`node -p "JSON.parse(process.env.CREDENTIALS).Credentials.SecretAccessKey"`
export AWS_SESSION_TOKEN=`node -p "JSON.parse(process.env.CREDENTIALS).Credentials.SessionToken"`
export AWS_EXPIRATION=`node -p "JSON.parse(process.env.CREDENTIALS).Credentials.Expiration"`

eval $@
