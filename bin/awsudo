#!/usr/bin/env bash
# DEPENDENCIES:
#  - awscli

set -e # Exit on any child process error

# RESOLVE THE SCRIPT PATH
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
JSON_LIB_PATH=${DIR/%\/bin//}
# END RESOLVE SCRIPT PATH

# ADD JSON TO PATH
PATH=$PATH:${JSON_LIB_PATH}/node_modules/json/lib
# END ADD JSON TO PATH

ROLE_ARN=$1
shift

if [[ ${ROLE_ARN} =~ ^arn:aws:iam ]]; then
    echo "Using RoleArn: ${ROLE_ARN}"
else
    echo "Invalid role arn provided. Provided value: ${ROLE_ARN}"
    exit 1
fi

# Assume role for running cloud formation
CREDENTIALS=`aws sts assume-role --role-arn ${ROLE_ARN} --role-session-name RoleSession --duration-seconds 900 --output=json`

# Set AWS Assumed Role Credentials on ENV
export AWS_ACCESS_KEY_ID=`echo ${CREDENTIALS} | json.js Credentials.AccessKeyId`
export AWS_SECRET_ACCESS_KEY=`echo ${CREDENTIALS} | json.js .Credentials.SecretAccessKey`
export AWS_SESSION_TOKEN=`echo ${CREDENTIALS} | json.js Credentials.SessionToken`
export AWS_EXPIRATION=`echo ${CREDENTIALS} | json.js Credentials.Expiration`

eval $@