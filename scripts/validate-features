#!/bin/bash
set -e

# Description:
#  This validates significant features of awsudo as functioning properly
#  in a true running context.
#
# Organization:
#  1. Supporting functions to facilitate output, testing, and complex
#     operations (e.g. soliciting MFA tokens and managing their life cycle
#  2. Check for prerequisites needed to run this script
#  3. The test suites, ordered from the most fundamental and simplistic to
#     more advanced behavior
#
# Contributing:
#  Not every feature that exists should be exercised by this tool. If a
#  unit test can adequately validate a given behavior, that should be
#  preferred.
#
#  This should be reserved for a high-level validation of the overall
#  ability of awsudo to run successfully. It is perfectly acceptable for
#  this script to shrink over time as better ways of testing functionality
#  emerge.

##################################
#       Logging Functions        #
##################################

# Display a message as a banner on a new line
#
# Usage: announce [message]
#
# Example:
#  announce "Let the tests begin"
announce() {
    echo
    info "** $* **" 1>&2
}

# Display a message with an error label on its own line
#
# Usage: error [message]
#
# Example:
#  error "Let the tests begin"
error() {
    printf "[ERROR] %s\n" "$*" 1>&2
}

# Display a message with an error label on its own line
#
# Usage: info [message]
#
# Example:
#  info "Let the tests begin"
info() {
    printf "[INFO] %s\n" "$*" 1>&2
}

# Display an indicator of progress so the user is aware
# of ongoing activity without overwhelming them with
# status text
progress() {
    printf "." 1>&2
}

##################################
#       Testing Functions        #
##################################

# Assert that one string contains another.
# Show progress on success, exit with an error on failure.
#
# Usage: assert_contains [phrase to display on failure] [command output] [string that output should contain]
#
# Example:
#  assert_contains "should say hello" "$(echo hello world)" "hello"
assert_contains() {
    ASSERTION="$1"
    TEST="$2"
    CHECK="$3"

    if echo "$TEST" | grep "$CHECK" > /dev/null ; then
        progress
    else
        echo
        error "$ASSERTION"
        error "Expected \"$TEST\" to contain \"$CHECK\""
        exit 1
    fi
}

# Assert that one string equals another.
# Show progress on success, exit with an error on failure.
#
# Usage: [phrase to display on failure] [command output] [string that output should contain
#
# Example:
#  assert_is "should say hello" "$(echo hello)" "hello"
assert_is() {
    ASSERTION="$1"
    TEST="$2"
    CHECK="$3"

    if [ "$TEST" == "$CHECK" ]; then
        progress
    else
        echo
        error "$ASSERTION"
        error "Expected \"$TEST\" to equal \"$CHECK\""
        exit 1
    fi
}

# Assert that one string does not equal another.
# Show progress on success, exit with an error on failure.
#
# Usage: [phrase to display on failure] [command output] [string that output should contain
#
# Example:
#  assert_is_not "should not say hello" "$(echo goodbye cruel world)" "hello"
assert_is_not() {
    ASSERTION="$1"
    TEST="$2"
    CHECK="$3"

    if [ "$TEST" != "$CHECK" ]; then
        progress
    else
        error "$ASSERTION"
        error "Expected \"$TEST\" NOT to equal \"$CHECK\""
        exit 1
    fi
}

# Report assertion as being skipped
#
# Usage: [phrase to display as being skipped]
#
# Example:
#  skip_assert "should not say hello"
#
# Aliases:
#  - skip_assert_is
#  - skip_assert_is_not
#  - skip_assert_contains
skip_assert() {
    ASSERTION="$1"

    info "Skipping: $ASSERTION"
}
skip_assert_is() { skip_assert "$1"; }
skip_assert_is_not() { skip_assert "$1"; }
skip_assert_contains() { skip_assert "$1"; }

##################################
# MFA Token Management Functions #
##################################
MFA_TOKEN=
LAST_MFA_EXPIRATION=0

get_mfa_expiration() {
    NEXT_MINUTE=$(docker run ubuntu date --date 'next minute' '+%H:%M:00')

    NEXT_MINUTE_SECONDS=$(docker run ubuntu date -d "$NEXT_MINUTE" '+%s')
    PREVIOUS_HALF_MINUTE_SECONDS=$(( $NEXT_MINUTE_SECONDS - 30))

    if [ "$PREVIOUS_HALF_MINUTE_SECONDS" -gt "$(date '+%s')" ]; then
        echo "$PREVIOUS_HALF_MINUTE_SECONDS"
    else
        echo "$NEXT_MINUTE_SECONDS"
    fi
}

read_mfa_token() {
    MFA_TTL=$(( $LAST_MFA_EXPIRATION - $(date '+%s') ))
    if [ "$MFA_TTL" -gt 0 ]; then
        info "Waiting $MFA_TTL seconds until previous MFA token expires..."
        sleep "$MFA_TTL"
    fi

    read -rp "Provide the current MFA token: " MFA_TOKEN
    LAST_MFA_EXPIRATION="$(get_mfa_expiration)"
}

#################################
#   Input Validation Functions  #
#################################
is_invalid_profile() {
    PROFILE=$1

    [ -z "$PROFILE" ] || ! grep "$PROFILE" ~/.aws/credentials ~/.aws/config > /dev/null
}

#################################
#      Prerequisite check       #
#################################
announce "Checking for prerequisites"

if ! command -v docker > /dev/null; then error "The docker command is required"; exit 1; fi
if [ ! -f ~/.aws/credentials ]; then error "A ~/.aws/credentials file is required"; exit 1; fi
if ! grep profile ~/.aws/credentials ~/.aws/config > /dev/null; then error "At least one AWS profile needs to be configured"; exit 1; fi
if ! grep mfa_serial ~/.aws/credentials ~/.aws/config > /dev/null; then error "At least one profile needs to be configured with MFA"; exit 1; fi

#################################
#       Start Test Suite        #
#################################
announce "Testing unauthenticated features"
assert_contains "should display help text" \
    "$(src/index.js -h 2>&1)" \
    "Show help"

announce "Testing access without MFA authentication"

while is_invalid_profile $PROFILE_NO_MFA; do
    read -rp "Provide a valid non-MFA profile with which to test: " PROFILE_NO_MFA
done
info "Extracting role ARN from profile for non-profile tests"
ROLE_ARN_NO_MFA=$(src/index.js -v -p="$PROFILE_NO_MFA" true | grep "Using RoleArn" | cut -d ' ' -f3)

info "Extracting AWS environment variables from credentials file for environment-only tests"
PROFILE_NO_MFA_AWS_ACCESS_KEY_ID="$(grep aws_access_key_id ~/.aws/credentials | head -n1 | cut -d '=' -f2 | xargs)"
PROFILE_NO_MFA_AWS_SECRET_ACCESS_KEY="$(grep aws_secret_access_key ~/.aws/credentials | head -n1 | cut -d '=' -f2 | xargs)"

assert_contains "should successfully invoke aws with profile" \
    "$(src/index.js -p="$PROFILE_NO_MFA" aws sts get-caller-identity)" \
    "UserId"

assert_contains "should successfully invoke aws with role ARN" \
    "$(src/index.js "$ROLE_ARN_NO_MFA" aws sts get-caller-identity)" \
    "UserId"

assert_contains "should successfully invoke aws using only environment variables" \
    "$(docker run -e AWS_ACCESS_KEY_ID=$PROFILE_NO_MFA_AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$PROFILE_NO_MFA_AWS_SECRET_ACCESS_KEY -v $PWD:/awsudo -w /awsudo awsudo/awsudo src/index.js $ROLE_ARN_NO_MFA aws sts get-caller-identity)" \
    "UserId"

announce "Testing access with MFA authentication"

while is_invalid_profile $PROFILE_MFA; do
    read -rp "Provide a valid profile that requires MFA with which to test: " PROFILE_MFA
done
info "Extracting role ARN from profile for non-profile tests"
read_mfa_token
ROLE_ARN_MFA=$(src/index.js -p="$PROFILE_MFA" -t="$MFA_TOKEN" true | grep "Using RoleArn" | cut -d ' ' -f3)

info "Proceeding to individual tests"
info "Note: each test will require a new MFA token"

read_mfa_token
assert_contains "should successfully invoke aws with profile" \
    "$(src/index.js -p="$PROFILE_MFA" -t="$MFA_TOKEN" aws sts get-caller-identity)" \
    "UserId"

read_mfa_token
assert_contains "should successfully invoke aws with role ARN" \
    "$(src/index.js $ROLE_ARN_MFA -p=$PROFILE_MFA -t=$MFA_TOKEN aws sts get-caller-identity)" \
    "UserId"

announce "Testing command processing"

assert_is_not "should pass commands any argument flags using a profile" \
    "$(src/index.js -p="$PROFILE_NO_MFA" ls -l)" \
    "$(src/index.js -p="$PROFILE_NO_MFA" ls)"

assert_is_not "should pass commands any argument flags using a role ARN" \
    "$(src/index.js "$ROLE_ARN_NO_MFA" ls -l)" \
    "$(src/index.js -p="$PROFILE_NO_MFA" ls)"

assert_contains "should not truncate npm run commands passed a -- divider" \
    "$(src/index.js $ROLE_ARN_NO_MFA npm run test:echo-for-validate-features -- all args present)" \
    "all args present"

assert_contains "should not interfere with positionals when processing options with values" \
    "$(src/index.js -d 1200 $ROLE_ARN_NO_MFA npm run test:echo-for-validate-features -- success)" \
    "success"

announce "Tests completed successfully"
