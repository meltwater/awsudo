#!/bin/bash
set -e

##################################
#       Logging Functions        #
##################################
announce() {
    echo
    info "** $* **" 1>&2
}

error() {
    printf "[ERROR] %s\n" "$*" 1>&2
}

info() {
    printf "[INFO] %s\n" "$*" 1>&2
}

progress() {
    printf "." 1>&2
}

##################################
#       Testing Functions        #
##################################
assert_contains() {
    ASSERTION="$1"
    TEST="$2"
    CHECK="$3"

    if echo "$TEST" | grep "$CHECK" > /dev/null ; then
        progress
    else
        echo
        error "$ASSERTION"
        error "Expected \"$TEST\" to contain \"$CHECK\""
        exit 1
    fi
}

assert_is() {
    ASSERTION="$1"
    TEST="$2"
    CHECK="$3"

    if [ "$TEST" == "$CHECK" ]; then
        progress
    else
        echo
        error "$ASSERTION"
        error "Expected \"$TEST\" to equal \"$CHECK\""
        exit 1
    fi
}

assert_is_not() {
    ASSERTION="$1"
    TEST="$2"
    CHECK="$3"

    if [ "$TEST" != "$CHECK" ]; then
        progress
    else
        error "$ASSERTION"
        error "Expected \"$TEST\" NOT to equal \"$CHECK\""
        exit 1
    fi
}

##################################
# MFA Token Management Functions #
##################################
MFA_TOKEN=
LAST_MFA_EXPIRATION=0

get_mfa_expiration() {
    NEXT_MINUTE=$(docker run ubuntu date --date 'next minute' '+%H:%M:00')

    NEXT_MINUTE_SECONDS=$(docker run ubuntu date -d "$NEXT_MINUTE" '+%s')
    PREVIOUS_HALF_MINUTE_SECONDS=$(( $NEXT_MINUTE_SECONDS - 30))

    if [ "$PREVIOUS_HALF_MINUTE_SECONDS" -gt "$(date '+%s')" ]; then
        echo "$PREVIOUS_HALF_MINUTE_SECONDS"
    else
        echo "$NEXT_MINUTE_SECONDS"
    fi
}

read_mfa_token() {
    MFA_TTL=$(( $LAST_MFA_EXPIRATION - $(date '+%s') ))
    if [ "$MFA_TTL" -gt 0 ]; then
        info "Waiting $MFA_TTL seconds until previous MFA token expires..."
        sleep "$MFA_TTL"
    fi

    read -rp "Provide the current MFA token: " MFA_TOKEN
    LAST_MFA_EXPIRATION="$(get_mfa_expiration)"
}

#################################
#       Start Test Suite        #
#################################
announce "Testing unauthenticated features"
assert_is "should display help text" \
    "$(src/index.js -h 2>&1 | grep -o 'Show help')" \
    "Show help"

announce "Testing access without MFA authentication"

read -rp "Provide a non-MFA profile with which to test: " PROFILE_NO_MFA
info "Extracting role ARN from profile for non-profile tests"
ROLE_ARN_NO_MFA=$(src/index.js -v -p="$PROFILE_NO_MFA" true | grep "Using RoleArn" | cut -d ' ' -f3)

info "Extracting AWS environment variables from credentials file for environment-only tests"
PROFILE_NO_MFA_AWS_ACCESS_KEY_ID="$(grep aws_access_key_id ~/.aws/credentials | head -n1 | cut -d '=' -f2 | xargs)"
PROFILE_NO_MFA_AWS_SECRET_ACCESS_KEY="$(grep aws_secret_access_key ~/.aws/credentials | head -n1 | cut -d '=' -f2 | xargs)"

assert_contains "should successfully invoke aws with profile" \
    "$(src/index.js -p="$PROFILE_NO_MFA" aws sts get-caller-identity)" \
    "UserId"

assert_contains "should successfully invoke aws with role ARN" \
    "$(src/index.js "$ROLE_ARN_NO_MFA" aws sts get-caller-identity)" \
    "UserId"

assert_contains "should successfully invoke aws using only environment variables" \
    "$(docker run -e AWS_ACCESS_KEY_ID=$PROFILE_NO_MFA_AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$PROFILE_NO_MFA_AWS_SECRET_ACCESS_KEY -v $PWD:/awsudo -w /awsudo awsudo/awsudo src/index.js $ROLE_ARN_NO_MFA aws sts get-caller-identity)" \
    "UserId"

announce "Testing access with MFA authentication"

read -rp "Provide an MFA profile with which to test: " PROFILE_MFA
info "Extracting role ARN from profile for non-profile tests"
read_mfa_token
ROLE_ARN_MFA=$(src/index.js -p="$PROFILE_MFA" -t="$MFA_TOKEN" true | grep "Using RoleArn" | cut -d ' ' -f3)

info "Proceeding to individual tests"
info "Note: each test will require a new MFA token"

read_mfa_token
assert_contains "should successfully invoke aws with profile" \
    "$(src/index.js -p="$PROFILE_MFA" -t="$MFA_TOKEN" aws sts get-caller-identity)" \
    "UserId"

read_mfa_token
assert_contains "should successfully invoke aws with role ARN" \
    "$(src/index.js $ROLE_ARN_MFA -p=$PROFILE_MFA -t=$MFA_TOKEN aws sts get-caller-identity)" \
    "UserId"

announce "Testing command processing"

assert_is_not "should pass commands any argument flags using a profile" \
    "$(src/index.js -p="$PROFILE_NO_MFA" ls -l)" \
    "$(src/index.js -p="$PROFILE_NO_MFA" ls)"

assert_is_not "should pass commands any argument flags using a role ARN" \
    "$(src/index.js "$ROLE_ARN_NO_MFA" ls -l)" \
    "$(src/index.js -p="$PROFILE_NO_MFA" ls)"

assert_contains "should not truncate npm run commands passed a -- divider" \
    "$(src/index.js $ROLE_ARN_NO_MFA npm run test:echo-for-validate-features -- all args present)" \
    "all args present"

announce "Tests completed successfully"
